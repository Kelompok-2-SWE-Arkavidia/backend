name: Deploy to Production

on:
  workflow_run:
    workflows: ["Go CD"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/backend
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/go-starter:latest
            
            # Buat config.yaml untuk aplikasi
            cat > config.yaml << EOF
            # Database configuration
            DB_USER: ${{ secrets.DB_USER }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_HOST: db

            # JWT and AES Keys
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            AES_KEY: ${{ secrets.AES_KEY }}

            # Mailing configuration
            APP_URL: ${{ secrets.APP_URL }}
            SMTP_HOST: ${{ secrets.SMTP_HOST }}
            SMTP_PORT: ${{ secrets.SMTP_PORT }}
            SMTP_SENDER_NAME: "${{ secrets.SMTP_SENDER_NAME }}"
            SMTP_AUTH_EMAIL: ${{ secrets.SMTP_AUTH_EMAIL }}
            SMTP_AUTH_PASSWORD: ${{ secrets.SMTP_AUTH_PASSWORD }}

            # Midtrans configuration
            CLIENT_KEY: "${{ secrets.CLIENT_KEY }}"
            SERVER_KEY: "${{ secrets.SERVER_KEY }}"
            IsProd: ${{ secrets.IS_PROD }}

            # AWS S3 configuration
            AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
            AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
            AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

            # AI Model Service
            AI_MODEL_URL: ${{ secrets.AI_MODEL_URL }}

            # GEMINI
            GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
            GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
            EOF
            
            # Buat docker-compose.yml dengan nilai yang sudah dimasukkan
            cat > docker-compose.prod.yml << EOF
            version: '3.8'

            services:
              app:
                image: ${{ secrets.DOCKER_USERNAME }}/go-starter:latest
                container_name: go-starter-app
                restart: always
                volumes:
                  - app_logs:/app/logs
                  - ./config.yaml:/app/config.yaml
                depends_on:
                  - db
                ports:
                  - "3000:3000"
                networks:
                  - backend

              db:
                image: postgres:alpine
                restart: always
                environment:
                  POSTGRES_USER: ${{ secrets.DB_USER }}
                  POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
                  POSTGRES_DB: ${{ secrets.DB_NAME }}
                ports:
                  - "5432:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                healthcheck:
                  test: [ "CMD", "pg_isready", "-U", "postgres" ]
                  interval: 10s
                  retries: 5
                  start_period: 10s
                  timeout: 5s
                networks:
                  - backend

            networks:
              backend:
                driver: bridge

            volumes:
              postgres_data:
              app_logs:
            EOF
            
            git pull origin main
            
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "Verifying deployment..."
            sleep 10
            docker ps | grep go-starter-app && echo "App is running" || echo "App failed to start"
